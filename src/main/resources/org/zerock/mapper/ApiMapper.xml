<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.mapper.ApiMapper">
	<!-- 버스 노선 정보   -->
	<insert id="inBusLine" parameterType="org.zerock.dto.BusDTO">
		insert into busnum(RTE_NM, RTE_ID)
		values (#{RTE_NM},#{RTE_ID});
	</insert>
	
	<select id="seBusLine" resultType="Integer">
		select count(*) from busnum where RTE_NM = #{RTE_NM} and RTE_ID = #{RTE_ID};
		
	</select>
	
	<select id="busLineList" resultType="org.zerock.dto.BusDTO">
		select * from busnum;
	</select>
	
	<!-- 버스 노선별 정류장별 이용 정보   -->
	<select id="busUseList" resultType="org.zerock.dto.BusUseDTO">
		select * from bususe;
	</select>
	
	<insert id="inBusUse" parameterType="org.zerock.dto.BusUseDTO">
		insert into bususe(USE_YMD, RTE_ID, RTE_NO, RTE_NM, STOPS_ID, SBWY_STNS_NM, GTON_TNOPE, GTOFF_TNOPE, REG_YMD)
		values (#{USE_YMD}, #{RTE_ID}, #{RTE_NO}, #{RTE_NM}, #{STOPS_ID}, #{SBWY_STNS_NM}, #{GTON_TNOPE}, #{GTOFF_TNOPE}, #{REG_YMD});
	</insert>
	
	<select id="seBusUse" resultType="Integer">
		select count(*) from bususe 
		where USE_YMD = #{USE_YMD} and RTE_ID = #{RTE_ID} and RTE_NO = #{RTE_NO} and RTE_NM = #{RTE_NM} and STOPS_ID = #{STOPS_ID} and SBWY_STNS_NM = #{SBWY_STNS_NM} and GTON_TNOPE = #{GTON_TNOPE} and GTOFF_TNOPE = #{GTOFF_TNOPE} and REG_YMD = #{REG_YMD}
		
	</select>
	<!-- 기간  -->
	<select id="period" resultType="java.util.Map">
		select /*+ use index */
			min(DATE_FORMAT(USE_YMD, '%y.%m.%d')) as startD, max(DATE_FORMAT(USE_YMD, '%y.%m.%d')) as endD
			from bususe;
	</select>
	<!-- 기간 카운트 -->
	<select id="dateCount" resultType="Integer">
		WITH days AS (
			select min(DATE_FORMAT(USE_YMD, '%y.%m.%d')) as startD, max(DATE_FORMAT(USE_YMD, '%y.%m.%d')) as endD
			from bususe
		)select 
			DATEDIFF(endD, startD) + 1
			from days;
	</select>
	<!-- 기간 사용자 수 -->
	<select id="useCount"  resultType="Integer">
		select sum(GTON_TNOPE) + 0.0 from bususe;
	</select>
	<select id="mBUList" resultType="java.util.Map">
		WITH bus_data AS (
		    SELECT 
		        SUM(GTON_TNOPE) AS 탑승객, 
		        DATE_FORMAT(USE_YMD, '%y.%m.%d') AS date,
		        DATE_FORMAT(USE_YMD, '%w') AS day,
		        CASE
		            WHEN DAYOFWEEK(USE_YMD) = 1 THEN '공휴일'
		            WHEN DAYOFWEEK(USE_YMD) = 7 THEN '토요일'
		            when DATE_FORMAT(USE_YMD, '%y.%m.%d') = '25.01.01' THEN '공휴일'
		            ELSE '평일'
		        END AS day_status,
		        CASE
		            WHEN bu.RTE_NO = bn.RTE_NM THEN bn.TRFC_MNS_TYPE_NM
		            ELSE 'No Match'
		        END AS TRFC_MNS_TYPE_NM
		    FROM 
		        bususe bu
		    JOIN 
		        busnum bn ON bu.RTE_NO = bn.RTE_NM
		    GROUP BY day_status, TRFC_MNS_TYPE_NM, date
		)
		SELECT 
		    day_status,
		    ROUND(count(day_status) / 6.0, 2) as daycount,  
		    sum(탑승객)as allcount,  
		    sum(CASE WHEN TRFC_MNS_TYPE_NM = "서울간선버스" THEN 탑승객 ELSE 0 END) + 0.0  AS bus1,
		    sum(CASE WHEN TRFC_MNS_TYPE_NM = "서울지선버스" THEN 탑승객 ELSE 0 END) + 0.0 AS bus2,
		    sum(CASE WHEN TRFC_MNS_TYPE_NM = "서울심야버스" THEN 탑승객 ELSE 0 END) + 0.0 AS bus3,
		    sum(CASE WHEN TRFC_MNS_TYPE_NM = "서울순환버스" THEN 탑승객 ELSE 0 END) + 0.0 AS bus4,
		    sum(CASE WHEN TRFC_MNS_TYPE_NM = "서울마을버스" THEN 탑승객 ELSE 0 END) + 0.0 AS bus5,
		    sum(CASE WHEN TRFC_MNS_TYPE_NM = "서울광역버스" THEN 탑승객 ELSE 0 END) + 0.0 AS bus6
		FROM bus_data
		GROUP BY day_status order by day_status desc;
	</select>
	
	<insert id="inRoute" parameterType="org.zerock.dto.RouteturnDTO">
	    <if test="BUS_OPR != 0 and BUS_OPR != 0.0">
	        insert into routeturn(
	            CRTR_DD, RTE_ID, STOPS_ID, BUS_OPR, 
	            BUS_OPR_00, BUS_OPR_01, BUS_OPR_02, BUS_OPR_03, BUS_OPR_04, BUS_OPR_05, 
	            BUS_OPR_06, BUS_OPR_07, BUS_OPR_08, BUS_OPR_09, BUS_OPR_10, BUS_OPR_11,
	            BUS_OPR_12, BUS_OPR_13, BUS_OPR_14, BUS_OPR_15, BUS_OPR_16, BUS_OPR_17, 
	            BUS_OPR_18, BUS_OPR_19, BUS_OPR_20, BUS_OPR_21, BUS_OPR_22, BUS_OPR_23,
	            STOPS_SEQ, setNum
	        )
	        values (
	            #{CRTR_DD}, #{RTE_ID}, #{STOPS_ID}, #{BUS_OPR}, 
	            #{BUS_OPR_00}, #{BUS_OPR_01}, #{BUS_OPR_02}, #{BUS_OPR_03}, #{BUS_OPR_04}, #{BUS_OPR_05},
	            #{BUS_OPR_06}, #{BUS_OPR_07}, #{BUS_OPR_08}, #{BUS_OPR_09}, #{BUS_OPR_10}, #{BUS_OPR_11},
	            #{BUS_OPR_12}, #{BUS_OPR_13}, #{BUS_OPR_14}, #{BUS_OPR_15}, #{BUS_OPR_16}, #{BUS_OPR_17},
	            #{BUS_OPR_18}, #{BUS_OPR_19}, #{BUS_OPR_20}, #{BUS_OPR_21}, #{BUS_OPR_22}, #{BUS_OPR_23},
	            #{STOPS_SEQ}, #{setNum}
	        );
	    </if>
	</insert>
	<select id="seRoute"  resultType="Integer">
		select count(*) from routeturn where CRTR_DD = #{CRTR_DD} and RTE_ID = #{RTE_ID}
	</select>
	<select id="RouteList"  resultType="java.util.Map">
		select DATE_FORMAT(ro.CRTR_DD, '%y.%m.%d') as date, 
			CASE
		        WHEN DAYOFWEEK(ro.CRTR_DD) = 1 THEN '일요일'
		        WHEN DAYOFWEEK(ro.CRTR_DD) = 2 THEN '월요일'
		        WHEN DAYOFWEEK(ro.CRTR_DD) = 3 THEN '화요일'
		        WHEN DAYOFWEEK(ro.CRTR_DD) = 4 THEN '수요일'
		        WHEN DAYOFWEEK(ro.CRTR_DD) = 5 THEN '목요일'
		        WHEN DAYOFWEEK(ro.CRTR_DD) = 6 THEN '금요일'
		        WHEN DAYOFWEEK(ro.CRTR_DD) = 7 THEN '토요일'
		    END AS week,
			CASE
				WHEN DAYOFWEEK(ro.CRTR_DD) = 1 THEN '공휴일'
				WHEN DAYOFWEEK(ro.CRTR_DD) = 7 THEN '토요일'
				when DATE_FORMAT(ro.CRTR_DD, '%y.%m.%d') = '25.01.01' THEN '공휴일'
				ELSE '평일'
			END AS day,
			ro.RTE_ID as busid, 
		    bn.RTE_NM as busname, 
		    BUS_OPR as line,
		    TRFC_MNS_TYPE_NM as busct
			from routeturn ro
		    join busnum bn on ro.RTE_ID = bn.tb_RTE_ID
		    group by bn.RTE_NM;
	</select>
	
	<select id="barList" resultType="java.util.Map">
		select 
			max(DATE_FORMAT(CRTR_DD, '%y.%m.%d')) as day,
			CASE
				WHEN DAYOFWEEK(CRTR_DD) = 1 THEN '공휴일'
				WHEN DAYOFWEEK(CRTR_DD) = 7 THEN '토요일'
				when DATE_FORMAT(CRTR_DD, '%y.%m.%d') = '25.01.01' THEN '공휴일'
				ELSE '평일'
			END AS day_status,
		    RTE_NM,
			ro.RTE_ID,
		    TRFC_MNS_TYPE_NM,
		    GREATEST(
				sum(BUS_OPR_00), sum(BUS_OPR_01), sum(BUS_OPR_02), sum(BUS_OPR_03), sum(BUS_OPR_04), sum(BUS_OPR_05), 
		        sum(BUS_OPR_06), sum(BUS_OPR_07), sum(BUS_OPR_08), sum(BUS_OPR_09), sum(BUS_OPR_10), sum(BUS_OPR_11), 
		        sum(BUS_OPR_12), sum(BUS_OPR_13), sum(BUS_OPR_14), sum(BUS_OPR_15), sum(BUS_OPR_16), sum(BUS_OPR_17), 
		        sum(BUS_OPR_18), sum(BUS_OPR_19), sum(BUS_OPR_20), sum(BUS_OPR_21), sum(BUS_OPR_22), sum(BUS_OPR_23)
			) as maxnum,
		    sum(BUS_OPR) as BUS_OPR,
		    sum(BUS_OPR_00) as BUS_OPR_0,
		    sum(BUS_OPR_01) as BUS_OPR_1,
		    sum(BUS_OPR_02) as BUS_OPR_2,
		    sum(BUS_OPR_03) as BUS_OPR_3,
		    sum(BUS_OPR_04) as BUS_OPR_4,
		    sum(BUS_OPR_05) as BUS_OPR_5,
		    sum(BUS_OPR_06) as BUS_OPR_6,
		    sum(BUS_OPR_07) as BUS_OPR_7,
		    sum(BUS_OPR_08) as BUS_OPR_8,
		    sum(BUS_OPR_09) as BUS_OPR_9,
		    sum(BUS_OPR_10) as BUS_OPR_10,
		    sum(BUS_OPR_11) as BUS_OPR_11,
		    sum(BUS_OPR_12) as BUS_OPR_12,
		    sum(BUS_OPR_13) as BUS_OPR_13,
		    sum(BUS_OPR_14) as BUS_OPR_14,
		    sum(BUS_OPR_15) as BUS_OPR_15,
		    sum(BUS_OPR_16) as BUS_OPR_16,
		    sum(BUS_OPR_17) as BUS_OPR_17,
		    sum(BUS_OPR_18) as BUS_OPR_18,
		    sum(BUS_OPR_19) as BUS_OPR_19,
		    sum(BUS_OPR_20) as BUS_OPR_20,
		    sum(BUS_OPR_21) as BUS_OPR_21,
		    sum(BUS_OPR_22) as BUS_OPR_22,
		    sum(BUS_OPR_23) as BUS_OPR_23
		from routeturn ro
		join busnum bn on ro.RTE_ID = bn.tb_RTE_ID
		where RTE_NM = '100'
		group by day_status, RTE_NM order by day_status desc;
	</select>
</mapper>